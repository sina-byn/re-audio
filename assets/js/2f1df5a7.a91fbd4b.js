"use strict";(self.webpackChunkre_audio=self.webpackChunkre_audio||[]).push([[767],{6511:(e,n,a)=>{a.r(n),a.d(n,{assets:()=>N,contentTitle:()=>k,default:()=>z,frontMatter:()=>b,metadata:()=>w,toc:()=>T});var i=a(4848),t=a(8453),s=a(6540),r=a(1629),l=a(3626),c=a(5775),d=a(780),o=a(8425),u=a(6422),m=a(292),p=a(3124),x=a(3956),h=a(584),f=a(2874),v=a(9955),y=a(43);const g=()=>{const e=(0,o.ms)(32),[n,a]=(0,s.useState)(e.current.getFrequencyData());return(0,s.useEffect)((()=>{let n;const i=()=>{a(e.current.getFrequencyData()),n=requestAnimationFrame(i)};return i(),()=>{void 0!==n&&cancelAnimationFrame(n)}}),[]),(0,i.jsx)("div",{className:"flex items-end justify-center gap-x-1 h-28 overflow-x-hidden",children:n.map(((e,n)=>(0,i.jsx)("div",{style:{height:e/255*100+"%"},className:"w-1.5 min-h-2.5 bg-white/50 rounded-t-full"},n)))})},j=()=>(0,i.jsx)(d.A,{code:"// AudioPlayer.tsx\n\nimport { Audio, useVisualizer, formatTime } from '@sina_byn/re-audio';\n\nconst Visualizer = () => {\n  const analyserRef = useVisualizer(32);\n  const [frame, setFrame] = useState<number[]>(analyserRef.current.getFrequencyData());\n\n  useEffect(() => {\n    let animationFrameId: number;\n\n    const updateFrame = () => {\n      setFrame(analyserRef.current.getFrequencyData());\n      animationFrameId = requestAnimationFrame(updateFrame);\n    };\n\n    updateFrame();\n\n    return () => {\n      if (animationFrameId !== undefined) {\n        cancelAnimationFrame(animationFrameId);\n      }\n    };\n  }, []);\n\n  return (\n    <div className='flex items-end justify-center gap-x-1 h-28 overflow-x-hidden'>\n      {frame.map((f, index) => (\n        <div\n          key={index}\n          style={{ height: `${(f / 255) * 100}%` }}\n          className='w-1.5 min-h-2.5 bg-white/50 rounded-t-full'\n        />\n      ))}\n    </div>\n  );\n};\n\nconst AudioPlayer = () => {\n  return (\n    <Audio\n      playlist={[\n        { id: 1, src: _1_mp3, name: 'for-her-chill' },\n        { id: 2, src: _2_mp3, name: 'trap-type-beat-rap-instrumental-riff' },\n        { id: 3, src: _3_mp3, name: 'whip-afro-dancehall' },\n      ]}\n    >\n      {({\n        loading,\n        trackIndex,\n        playlist,\n        playing,\n        togglePlay,\n        duration,\n        currentTime,\n        volume,\n        setVolume,\n        prevTrack,\n        nextTrack,\n        rewindTrack,\n        forwardTrack,\n        setCurrentTime,\n      }) => (\n        <div>\n          <div className='flex'>\n            <div className='flex max-md:flex-col justify-between gap-4 w-full'>\n              <div className='flex items-center gap-4'>\n                <div className='size-[60px] bg-[#c4c4c4] rounded' />\n\n                <div className='flex flex-col'>\n                  <span className='capitalize'>\n                    {/* @ts-ignore */}\n                    {playlist[trackIndex].name.split(/-/).join(' ')}\n                  </span>\n                  <span>{formatTime(currentTime)}</span>\n                </div>\n              </div>\n\n              <div className='flex items-center max-md:justify-center gap-x-4'>\n                <button type='button' onClick={rewindTrack.bind(null, 10)}>\n                  <IconPlayerSkipBackFilled />\n                </button>\n\n                <button type='button' onClick={prevTrack}>\n                  <IconPlayerTrackPrevFilled />\n                </button>\n\n                <button type='button' onClick={togglePlay}>\n                  {playing ? <IconPlayerPauseFilled /> : <IconPlayerPlayFilled />}\n                </button>\n\n                <button type='button' onClick={nextTrack}>\n                  <IconPlayerTrackNextFilled />\n                </button>\n\n                <button type='button' onClick={forwardTrack.bind(null, 10)}>\n                  <IconPlayerSkipForwardFilled />\n                </button>\n              </div>\n            </div>\n          </div>\n\n          <div className='mt-4'>\n            <input\n              type='range'\n              min='0'\n              max={duration}\n              step='1'\n              className='w-full'\n              value={currentTime}\n              onChange={e => setCurrentTime(+e.currentTarget.value)}\n            />\n          </div>\n\n          <div className='flex items-center justify-between gap-x-4'>\n            <div className='flex items-center gap-x-2 mt-4'>\n              <IconVolume2 />\n\n              <input\n                type='range'\n                min='0'\n                max='100'\n                className='w-full md:w-[150px]'\n                value={volume}\n                onChange={e => setVolume(+e.currentTarget.value)}\n              />\n\n              <IconVolume />\n            </div>\n\n            {loading && <span className='max-lg:text-sm mt-2'>loading...</span>}\n          </div>\n\n          <div className='mt-8'>\n            <Visualizer />\n          </div>\n        </div>\n      )}\n    </Audio>\n  );\n};\n\nexport default AudioPlayer;\n",children:(0,i.jsx)("div",{className:"re-audio-sample",children:(0,i.jsx)(o.fP,{playlist:[{id:1,src:r.A,name:"for-her-chill"},{id:2,src:l.A,name:"trap-type-beat-rap-instrumental-riff"},{id:3,src:c.A,name:"whip-afro-dancehall"}],children:e=>{let{loading:n,trackIndex:a,playlist:t,playing:s,togglePlay:r,duration:l,currentTime:c,volume:d,setVolume:j,prevTrack:b,nextTrack:k,rewindTrack:w,forwardTrack:N,setCurrentTime:T}=e;return(0,i.jsxs)("div",{children:[(0,i.jsx)("div",{className:"flex",children:(0,i.jsxs)("div",{className:"flex max-md:flex-col justify-between gap-4 w-full",children:[(0,i.jsxs)("div",{className:"flex items-center gap-4",children:[(0,i.jsx)("div",{className:"size-[60px] bg-[#c4c4c4] rounded"}),(0,i.jsxs)("div",{className:"flex flex-col",children:[(0,i.jsx)("span",{className:"capitalize",children:t[a].name.split(/-/).join(" ")}),(0,i.jsx)("span",{children:(0,o.fU)(c)})]})]}),(0,i.jsxs)("div",{className:"flex items-center max-md:justify-center gap-x-4",children:[(0,i.jsx)("button",{type:"button",onClick:w.bind(null,10),children:(0,i.jsx)(u.A,{})}),(0,i.jsx)("button",{type:"button",onClick:b,children:(0,i.jsx)(m.A,{})}),(0,i.jsx)("button",{type:"button",onClick:r,children:s?(0,i.jsx)(p.A,{}):(0,i.jsx)(x.A,{})}),(0,i.jsx)("button",{type:"button",onClick:k,children:(0,i.jsx)(h.A,{})}),(0,i.jsx)("button",{type:"button",onClick:N.bind(null,10),children:(0,i.jsx)(f.A,{})})]})]})}),(0,i.jsx)("div",{className:"mt-4",children:(0,i.jsx)("input",{type:"range",min:"0",max:l,step:"1",className:"w-full",value:c,onChange:e=>T(+e.currentTarget.value)})}),(0,i.jsxs)("div",{className:"flex items-center justify-between gap-x-4",children:[(0,i.jsxs)("div",{className:"flex items-center gap-x-2 mt-4",children:[(0,i.jsx)(v.A,{}),(0,i.jsx)("input",{type:"range",min:"0",max:"100",className:"w-full md:w-[150px]",value:d,onChange:e=>j(+e.currentTarget.value)}),(0,i.jsx)(y.A,{})]}),n&&(0,i.jsx)("span",{className:"max-lg:text-sm mt-2",children:"loading..."})]}),(0,i.jsx)("div",{className:"mt-8",children:(0,i.jsx)(g,{})})]})}})})}),b={sidebar_position:1},k="useVisualizer",w={id:"audio-visualizers/useVisualizer",title:"useVisualizer",description:"---",source:"@site/docs/audio-visualizers/useVisualizer.mdx",sourceDirName:"audio-visualizers",slug:"/audio-visualizers/useVisualizer",permalink:"/re-audio/docs/audio-visualizers/useVisualizer",draft:!1,unlisted:!1,editUrl:"https://github.com/sina-byn/re-audio-4/tree/main/packages/www/docs/audio-visualizers/useVisualizer.mdx",tags:[],version:"current",sidebarPosition:1,frontMatter:{sidebar_position:1},sidebar:"tutorialSidebar",previous:{title:"Composition Patterns",permalink:"/re-audio/docs/composition-patterns"},next:{title:"useVisualizerFrame",permalink:"/re-audio/docs/audio-visualizers/useVisualizerFrame"}},N={},T=[];function F(e){const n={a:"a",code:"code",h1:"h1",header:"header",hr:"hr",p:"p",...(0,t.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(n.header,{children:(0,i.jsx)(n.h1,{id:"usevisualizer",children:"useVisualizer"})}),"\n",(0,i.jsx)(n.hr,{}),"\n",(0,i.jsxs)(n.p,{children:["The ",(0,i.jsx)(n.code,{children:"useVisualizer"})," hook returns an ",(0,i.jsx)(n.code,{children:"AudioAnalyserRef"})," that wraps an ",(0,i.jsx)(n.a,{href:"/docs/api#audio-analyser",children:(0,i.jsx)(n.code,{children:"AudioAnalyser"})})," instance."]}),"\n",(0,i.jsxs)(n.p,{children:["You can call the ",(0,i.jsx)(n.code,{children:"getFrequencyData()"})," on the provided ref to retrieve an array of integers ranging from 0 to 255.\r\nThis array represents the real-time frequency data of the currently playing track, allowing you to visualize the audio frequencies effectively."]}),"\n",(0,i.jsxs)(n.p,{children:["This hook accepts an optional ",(0,i.jsx)(n.code,{children:"dataPoints"})," parameter, which defaults to ",(0,i.jsx)(n.code,{children:"64"})," if not specified. This value determines the length of the array returned by ",(0,i.jsx)(n.code,{children:"getFrequencyData()"}),"."]}),"\n",(0,i.jsx)(j,{})]})}function z(e={}){const{wrapper:n}={...(0,t.R)(),...e.components};return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(F,{...e})}):F(e)}}}]);