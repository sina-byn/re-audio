"use strict";(self.webpackChunkre_audio=self.webpackChunkre_audio||[]).push([[326],{8298:(e,n,a)=>{a.r(n),a.d(n,{assets:()=>k,contentTitle:()=>b,default:()=>z,frontMatter:()=>y,metadata:()=>w,toc:()=>N});var i=a(4848),s=a(8453),t=a(1629),r=a(3626),l=a(5775),d=a(780),c=a(8425),o=a(6422),u=a(292),m=a(3124),x=a(3956),p=a(584),h=a(2874),f=a(9955),v=a(43);const j=()=>{const e=(0,c.vN)(16);return(0,i.jsxs)("div",{className:"flex justify-center gap-x-1",children:[(0,i.jsx)("div",{className:"flex flex-row-reverse items-end justify-center gap-x-1 h-28 overflow-x-hidden",children:e.map(((e,n)=>(0,i.jsx)("div",{style:{height:e/255*100+"%"},className:"w-1.5 min-h-2.5 bg-white/50 rounded-t-full"},n)))}),(0,i.jsx)("div",{className:"flex items-end justify-center gap-x-1 h-28 overflow-x-hidden",children:e.map(((e,n)=>(0,i.jsx)("div",{style:{height:e/255*100+"%"},className:"w-1.5 min-h-2.5 bg-white/50 rounded-t-full"},n)))})]})},g=()=>(0,i.jsx)(d.A,{code:"// AudioPlayer.tsx\n\nimport { Audio, useVisualizerFrame, formatTime } from '@sina_byn/re-audio';\n\nconst Visualizer = () => {\n  const frame = useVisualizerFrame(16);\n\n  return (\n    <div className='flex justify-center gap-x-1'>\n      <div className='flex flex-row-reverse items-end justify-center gap-x-1 h-28 overflow-x-hidden'>\n        {frame.map((f, index) => (\n          <div\n            key={index}\n            style={{ height: `${(f / 255) * 100}%` }}\n            className='w-1.5 min-h-2.5 bg-white/50 rounded-t-full'\n          />\n        ))}\n      </div>\n      <div className='flex items-end justify-center gap-x-1 h-28 overflow-x-hidden'>\n        {frame.map((f, index) => (\n          <div\n            key={index}\n            style={{ height: `${(f / 255) * 100}%` }}\n            className='w-1.5 min-h-2.5 bg-white/50 rounded-t-full'\n          />\n        ))}\n      </div>\n    </div>\n  );\n};\n\nconst AudioPlayer = () => {\n  return (\n    <CodeBlock code={code}>\n      <div className='re-audio-sample'>\n        <Audio\n          playlist={[\n            { id: 1, src: '/audio/1.mp3', name: 'for-her-chill' },\n            { id: 2, src: '/audio/2.mp3', name: 'trap-type-beat-rap-instrumental-riff' },\n            { id: 3, src: '/audio/3.mp3', name: 'whip-afro-dancehall' },\n          ]}\n        >\n          {({\n            loading,\n            trackIndex,\n            playlist,\n            playing,\n            togglePlay,\n            duration,\n            currentTime,\n            volume,\n            setVolume,\n            prevTrack,\n            nextTrack,\n            rewindTrack,\n            forwardTrack,\n            setCurrentTime,\n          }) => (\n            <div>\n              <div className='flex'>\n                <div className='flex max-md:flex-col justify-between gap-4 w-full'>\n                  <div className='flex items-center gap-4'>\n                    <div className='size-[60px] bg-[#c4c4c4] rounded' />\n\n                    <div className='flex flex-col'>\n                      <span className='capitalize'>\n                        {/* @ts-ignore */}\n                        {playlist[trackIndex].name.split(/-/).join(' ')}\n                      </span>\n                      <span>{formatTime(currentTime)}</span>\n                    </div>\n                  </div>\n\n                  <div className='flex items-center max-md:justify-center gap-x-4'>\n                    <button type='button' onClick={rewindTrack.bind(null, 10)}>\n                      <IconPlayerSkipBackFilled />\n                    </button>\n\n                    <button type='button' onClick={prevTrack}>\n                      <IconPlayerTrackPrevFilled />\n                    </button>\n\n                    <button type='button' onClick={togglePlay}>\n                      {playing ? <IconPlayerPauseFilled /> : <IconPlayerPlayFilled />}\n                    </button>\n\n                    <button type='button' onClick={nextTrack}>\n                      <IconPlayerTrackNextFilled />\n                    </button>\n\n                    <button type='button' onClick={forwardTrack.bind(null, 10)}>\n                      <IconPlayerSkipForwardFilled />\n                    </button>\n                  </div>\n                </div>\n              </div>\n\n              <div className='mt-4'>\n                <input\n                  type='range'\n                  min='0'\n                  max={duration}\n                  step='1'\n                  className='w-full'\n                  value={currentTime}\n                  onChange={e => setCurrentTime(+e.currentTarget.value)}\n                />\n              </div>\n\n              <div className='flex items-center justify-between gap-x-4'>\n                <div className='flex items-center gap-x-2 mt-4'>\n                  <IconVolume2 />\n\n                  <input\n                    type='range'\n                    min='0'\n                    max='100'\n                    className='w-full md:w-[150px]'\n                    value={volume}\n                    onChange={e => setVolume(+e.currentTarget.value)}\n                  />\n\n                  <IconVolume />\n                </div>\n\n                {loading && <span className='max-lg:text-sm mt-2'>loading...</span>}\n              </div>\n\n              <div className='mt-8'>\n                <Visualizer />\n              </div>\n            </div>\n          )}\n        </Audio>\n      </div>\n    </CodeBlock>\n  );\n};\n\nexport default AudioPlayer;\n",children:(0,i.jsx)("div",{className:"re-audio-sample",children:(0,i.jsx)(c.fP,{playlist:[{id:1,src:t.A,name:"for-her-chill"},{id:2,src:r.A,name:"trap-type-beat-rap-instrumental-riff"},{id:3,src:l.A,name:"whip-afro-dancehall"}],children:e=>{let{loading:n,trackIndex:a,playlist:s,playing:t,togglePlay:r,duration:l,currentTime:d,volume:g,setVolume:y,prevTrack:b,nextTrack:w,rewindTrack:k,forwardTrack:N,setCurrentTime:T}=e;return(0,i.jsxs)("div",{children:[(0,i.jsx)("div",{className:"flex",children:(0,i.jsxs)("div",{className:"flex max-md:flex-col justify-between gap-4 w-full",children:[(0,i.jsxs)("div",{className:"flex items-center gap-4",children:[(0,i.jsx)("div",{className:"size-[60px] bg-[#c4c4c4] rounded"}),(0,i.jsxs)("div",{className:"flex flex-col",children:[(0,i.jsx)("span",{className:"capitalize",children:s[a].name.split(/-/).join(" ")}),(0,i.jsx)("span",{children:(0,c.fU)(d)})]})]}),(0,i.jsxs)("div",{className:"flex items-center max-md:justify-center gap-x-4",children:[(0,i.jsx)("button",{type:"button",onClick:k.bind(null,10),children:(0,i.jsx)(o.A,{})}),(0,i.jsx)("button",{type:"button",onClick:b,children:(0,i.jsx)(u.A,{})}),(0,i.jsx)("button",{type:"button",onClick:r,children:t?(0,i.jsx)(m.A,{}):(0,i.jsx)(x.A,{})}),(0,i.jsx)("button",{type:"button",onClick:w,children:(0,i.jsx)(p.A,{})}),(0,i.jsx)("button",{type:"button",onClick:N.bind(null,10),children:(0,i.jsx)(h.A,{})})]})]})}),(0,i.jsx)("div",{className:"mt-4",children:(0,i.jsx)("input",{type:"range",min:"0",max:l,step:"1",className:"w-full",value:d,onChange:e=>T(+e.currentTarget.value)})}),(0,i.jsxs)("div",{className:"flex items-center justify-between gap-x-4",children:[(0,i.jsxs)("div",{className:"flex items-center gap-x-2 mt-4",children:[(0,i.jsx)(f.A,{}),(0,i.jsx)("input",{type:"range",min:"0",max:"100",className:"w-full md:w-[150px]",value:g,onChange:e=>y(+e.currentTarget.value)}),(0,i.jsx)(v.A,{})]}),n&&(0,i.jsx)("span",{className:"max-lg:text-sm mt-2",children:"loading..."})]}),(0,i.jsx)("div",{className:"mt-8",children:(0,i.jsx)(j,{})})]})}})})}),y={sidebar_position:2},b="useVisualizerFrame",w={id:"audio-visualizers/useVisualizerFrame",title:"useVisualizerFrame",description:"---",source:"@site/docs/audio-visualizers/useVisualizerFrame.mdx",sourceDirName:"audio-visualizers",slug:"/audio-visualizers/useVisualizerFrame",permalink:"/re-audio/docs/audio-visualizers/useVisualizerFrame",draft:!1,unlisted:!1,editUrl:"https://github.com/sina-byn/re-audio-4/tree/main/packages/www/docs/audio-visualizers/useVisualizerFrame.mdx",tags:[],version:"current",sidebarPosition:2,frontMatter:{sidebar_position:2},sidebar:"tutorialSidebar",previous:{title:"useVisualizer",permalink:"/re-audio/docs/audio-visualizers/useVisualizer"},next:{title:"API",permalink:"/re-audio/docs/api"}},k={},N=[];function T(e){const n={a:"a",code:"code",h1:"h1",header:"header",hr:"hr",p:"p",...(0,s.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(n.header,{children:(0,i.jsx)(n.h1,{id:"usevisualizerframe",children:"useVisualizerFrame"})}),"\n",(0,i.jsx)(n.hr,{}),"\n",(0,i.jsxs)(n.p,{children:["The ",(0,i.jsx)(n.code,{children:"useVisualizerFrame"})," hook is a wrapper around the ",(0,i.jsx)(n.a,{href:"/docs/audio-visualizers/useVisualizer",children:(0,i.jsx)(n.code,{children:"useVisualizer"})})," hook that integrates the ",(0,i.jsx)(n.code,{children:"getFrequencyData()"})," function with ",(0,i.jsx)(n.code,{children:"requestAnimationFrame()"}),".\r\nIt returns a ",(0,i.jsx)(n.code,{children:"frame"}),", which is a ",(0,i.jsx)(n.code,{children:"number[]"})," representing the frequency data as a React state."]}),"\n",(0,i.jsx)(n.p,{children:"This frame updates in real-time as the audio plays, allowing you to render your visualizer without any additional concerns about data management or updates."}),"\n",(0,i.jsxs)(n.p,{children:["This hook accepts an optional ",(0,i.jsx)(n.code,{children:"dataPoints"})," parameter, which defaults to ",(0,i.jsx)(n.code,{children:"64"})," if not specified. This value determines the length of the ",(0,i.jsx)(n.code,{children:"frame"}),"."]}),"\n",(0,i.jsx)(g,{})]})}function z(e={}){const{wrapper:n}={...(0,s.R)(),...e.components};return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(T,{...e})}):T(e)}}}]);