"use strict";(self.webpackChunkre_audio=self.webpackChunkre_audio||[]).push([[653],{3419:(e,n,i)=>{i.r(n),i.d(n,{assets:()=>w,contentTitle:()=>b,default:()=>T,frontMatter:()=>y,metadata:()=>k,toc:()=>N});var a=i(4848),s=i(8453),t=i(1629),l=i(3626),r=i(5775),d=i(780),c=i(8425),o=i(6422),u=i(292),m=i(3124),h=i(3956),p=i(584),x=i(2874),f=i(9955),v=i(43);const g=()=>{const[e,n]=(0,c.cT)(400);return(0,a.jsx)("div",{style:{opacity:n?.2:1},className:"flex justify-center overflow-hidden",children:(0,a.jsx)("div",{className:"flex items-end justify-between h-32 w-fit gap-1",children:e.map(((e,n)=>(0,a.jsx)("div",{style:{height:100*(1-e)+"%"},className:"w-px min-h-2.5 bg-white/50 rounded-t-full shrink-0"},n)))})})},j=()=>(0,a.jsx)(d.A,{code:"// AudioPlayer.tsx\n\nimport { Audio, useVisualizer, formatTime } from '@sina_byn/re-audio';\n\nconst VisualizerChart = () => {\n  const [amplitude, isPending] = useVisualizerChart(400);\n\n  return (\n    <div style={{ opacity: isPending ? 0.2 : 1 }} className='flex justify-center overflow-hidden'>\n      <div className='flex items-end justify-between h-32 w-fit gap-1'>\n        {amplitude.map((amp, index) => (\n          <div\n            key={index}\n            style={{ height: `${(1 - amp) * 100}%` }}\n            className='w-px min-h-2.5 bg-white/50 rounded-t-full shrink-0'\n          />\n        ))}\n      </div>\n    </div>\n  );\n};\n\nconst AudioPlayer = () => {\n  return (\n    <Audio\n      playlist={[\n        { id: 1, src: _1_mp3, name: 'for-her-chill' },\n        { id: 2, src: _2_mp3, name: 'trap-type-beat-rap-instrumental-riff' },\n        { id: 3, src: _3_mp3, name: 'whip-afro-dancehall' },\n      ]}\n    >\n      {({\n        loading,\n        trackIndex,\n        playlist,\n        playing,\n        togglePlay,\n        duration,\n        currentTime,\n        volume,\n        setVolume,\n        prevTrack,\n        nextTrack,\n        rewindTrack,\n        forwardTrack,\n        setCurrentTime,\n      }) => (\n        <div>\n          <div className='flex'>\n            <div className='flex max-md:flex-col justify-between gap-4 w-full'>\n              <div className='flex items-center gap-4'>\n                <div className='size-[60px] bg-[#c4c4c4] rounded' />\n\n                <div className='flex flex-col'>\n                  <span className='capitalize'>\n                    {/* @ts-ignore */}\n                    {playlist[trackIndex].name.split(/-/).join(' ')}\n                  </span>\n                  <span>{formatTime(currentTime)}</span>\n                </div>\n              </div>\n\n              <div className='flex items-center max-md:justify-center gap-x-4'>\n                <button type='button' onClick={rewindTrack.bind(null, 10)}>\n                  <IconPlayerSkipBackFilled />\n                </button>\n\n                <button type='button' onClick={prevTrack}>\n                  <IconPlayerTrackPrevFilled />\n                </button>\n\n                <button type='button' onClick={togglePlay}>\n                  {playing ? <IconPlayerPauseFilled /> : <IconPlayerPlayFilled />}\n                </button>\n\n                <button type='button' onClick={nextTrack}>\n                  <IconPlayerTrackNextFilled />\n                </button>\n\n                <button type='button' onClick={forwardTrack.bind(null, 10)}>\n                  <IconPlayerSkipForwardFilled />\n                </button>\n              </div>\n            </div>\n          </div>\n\n          <div className='mt-4'>\n            <input\n              type='range'\n              min='0'\n              max={duration}\n              step='1'\n              className='w-full'\n              value={currentTime}\n              onChange={e => setCurrentTime(+e.currentTarget.value)}\n            />\n          </div>\n\n          <div className='flex items-center justify-between gap-x-4'>\n            <div className='flex items-center gap-x-2 mt-4'>\n              <IconVolume2 />\n\n              <input\n                type='range'\n                min='0'\n                max='100'\n                className='w-full md:w-[150px]'\n                value={volume}\n                onChange={e => setVolume(+e.currentTarget.value)}\n              />\n\n              <IconVolume />\n            </div>\n\n            {loading && <span className='max-lg:text-sm mt-2'>loading...</span>}\n          </div>\n\n          <div className='mt-8'>\n            <VisualizerChart />\n          </div>\n        </div>\n      )}\n    </Audio>\n  );\n};\n\nexport default AudioPlayer;\n",children:(0,a.jsx)("div",{className:"re-audio-sample",children:(0,a.jsx)(c.fP,{playlist:[{id:1,src:t.A,name:"for-her-chill"},{id:2,src:l.A,name:"trap-type-beat-rap-instrumental-riff"},{id:3,src:r.A,name:"whip-afro-dancehall"}],children:e=>{let{loading:n,trackIndex:i,playlist:s,playing:t,togglePlay:l,duration:r,currentTime:d,volume:j,setVolume:y,prevTrack:b,nextTrack:k,rewindTrack:w,forwardTrack:N,setCurrentTime:C}=e;return(0,a.jsxs)("div",{children:[(0,a.jsx)("div",{className:"flex",children:(0,a.jsxs)("div",{className:"flex max-md:flex-col justify-between gap-4 w-full",children:[(0,a.jsxs)("div",{className:"flex items-center gap-4",children:[(0,a.jsx)("div",{className:"size-[60px] bg-[#c4c4c4] rounded"}),(0,a.jsxs)("div",{className:"flex flex-col",children:[(0,a.jsx)("span",{className:"capitalize",children:s[i].name.split(/-/).join(" ")}),(0,a.jsx)("span",{children:(0,c.fU)(d)})]})]}),(0,a.jsxs)("div",{className:"flex items-center max-md:justify-center gap-x-4",children:[(0,a.jsx)("button",{type:"button",onClick:w.bind(null,10),children:(0,a.jsx)(o.A,{})}),(0,a.jsx)("button",{type:"button",onClick:b,children:(0,a.jsx)(u.A,{})}),(0,a.jsx)("button",{type:"button",onClick:l,children:t?(0,a.jsx)(m.A,{}):(0,a.jsx)(h.A,{})}),(0,a.jsx)("button",{type:"button",onClick:k,children:(0,a.jsx)(p.A,{})}),(0,a.jsx)("button",{type:"button",onClick:N.bind(null,10),children:(0,a.jsx)(x.A,{})})]})]})}),(0,a.jsx)("div",{className:"mt-4",children:(0,a.jsx)("input",{type:"range",min:"0",max:r,step:"1",className:"w-full",value:d,onChange:e=>C(+e.currentTarget.value)})}),(0,a.jsxs)("div",{className:"flex items-center justify-between gap-x-4",children:[(0,a.jsxs)("div",{className:"flex items-center gap-x-2 mt-4",children:[(0,a.jsx)(f.A,{}),(0,a.jsx)("input",{type:"range",min:"0",max:"100",className:"w-full md:w-[150px]",value:j,onChange:e=>y(+e.currentTarget.value)}),(0,a.jsx)(v.A,{})]}),n&&(0,a.jsx)("span",{className:"max-lg:text-sm mt-2",children:"loading..."})]}),(0,a.jsx)("div",{className:"mt-8",children:(0,a.jsx)(g,{})})]})}})})}),y={sidebar_position:3},b="useVisualizerChart",k={id:"audio-visualizers/useVisualizerChart",title:"useVisualizerChart",description:"---",source:"@site/docs/audio-visualizers/useVisualizerChart.mdx",sourceDirName:"audio-visualizers",slug:"/audio-visualizers/useVisualizerChart",permalink:"/re-audio/docs/audio-visualizers/useVisualizerChart",draft:!1,unlisted:!1,editUrl:"https://github.com/sina-byn/re-audio-4/tree/main/packages/www/docs/audio-visualizers/useVisualizerChart.mdx",tags:[],version:"current",sidebarPosition:3,frontMatter:{sidebar_position:3},sidebar:"tutorialSidebar",previous:{title:"useVisualizerFrame",permalink:"/re-audio/docs/audio-visualizers/useVisualizerFrame"},next:{title:"API",permalink:"/re-audio/docs/api"}},w={},N=[];function C(e){const n={code:"code",h1:"h1",header:"header",hr:"hr",li:"li",p:"p",strong:"strong",ul:"ul",...(0,s.R)(),...e.components};return(0,a.jsxs)(a.Fragment,{children:[(0,a.jsx)(n.header,{children:(0,a.jsx)(n.h1,{id:"usevisualizerchart",children:"useVisualizerChart"})}),"\n",(0,a.jsx)(n.hr,{}),"\n",(0,a.jsxs)(n.p,{children:["The ",(0,a.jsx)(n.code,{children:"useVisualizerChart"})," hook returns a tuple ",(0,a.jsx)(n.code,{children:"[amplitude, pending]"}),":"]}),"\n",(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.code,{children:"amplitude"})," is an array of numbers representing the ",(0,a.jsx)(n.strong,{children:"inverted amplitude"})," of the currently playing audio track, suitable for visualizing waveforms or bar charts."]}),"\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.code,{children:"pending"})," is a boolean indicating whether the audio data is still being fetched and processed."]}),"\n"]}),"\n",(0,a.jsxs)(n.p,{children:["This hook accepts an optional ",(0,a.jsx)(n.code,{children:"dataPoints"})," parameter, which defaults to ",(0,a.jsx)(n.code,{children:"64"})," if not specified. This value determines the number of points in the ",(0,a.jsx)(n.code,{children:"amplitude"})," array, effectively controlling the resolution of the visualized waveform."]}),"\n",(0,a.jsx)(n.p,{children:"The hook automatically handles:"}),"\n",(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsx)(n.li,{children:"Fetching and decoding the current track."}),"\n",(0,a.jsx)(n.li,{children:"Calculating the average amplitude in each block."}),"\n",(0,a.jsx)(n.li,{children:"Running the computation in a Web Worker to avoid blocking the main thread."}),"\n",(0,a.jsx)(n.li,{children:"Cleaning up workers and aborting fetches when the track changes."}),"\n"]}),"\n",(0,a.jsx)(j,{})]})}function T(e={}){const{wrapper:n}={...(0,s.R)(),...e.components};return n?(0,a.jsx)(n,{...e,children:(0,a.jsx)(C,{...e})}):C(e)}}}]);